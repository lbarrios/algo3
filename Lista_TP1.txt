
PROBLEMA 1
  Informe:
    * Descripción: OK
    * Hipótesis de resolución: ok
    * Justificación formal de correctitud: ok
    * Cota de complejidad temporal: ~~ Pseudo hecho y lindo. Falta revisar la partre escrita.
    * Verificación mediante casos de prueba: OK
    * Medición empírica de performance:
        1> grafico dividiendo por n^2 para mostrar que es subcuadratico
        2> grafico mostrando que la complejidad general esta dominada por el sort
           a> programando un algoritmo de sort genérico (sg), y midiendo los dos casos.
              si todo sale bien, graficar nuestro algoritmo dividido por sg debería dar constante.
           b> midiendo por separado la parte del sort (sort) y el resto del algoritmo (resto)
              luego al graficar sort/resto, debería dar una función creciente, 
              con lo cual veríamos que sort >resto
        3> analizar el tiempo variando cuan cerca estan los camiones en relacion al vigilante. no es demasiado
            claro como implementar estos casos

    -Test1: ordenamiento de fechas de camiones (ascend, descend, aleatorio). 
        (es igual a lo del 2>) 
        Gráfico: tiempo vs n:cant camiones (en el mismo se comparan los 3 casos). 
	      Análisis: 
		
    -Test2: variación de amplitud del intervalo de fechas de camiones teniendo fijo intervalo inspector. 
              (las fechas ordenadas ascend, descen, aleatorio). n es fijo. 
            Gráfico: tiempo vs intervalo de fechas camiones (se comparan los 3 casos ascend, descen, aleat). 
            Análisis: 	   
 
			
  Código:
    * Algoritmo: OK
    * Tests: Migue terminadolo

PROBLEMA 2
  Informe:
    * Descripción: OK
    * Hipótesis de resolución: ok
    * Justificación formal de correctitud: ok
    * Cota de complejidad temporal: ok
    * Verificación mediante casos de prueba: OK
    * Medición empírica de performance:
        1> grafico dividiendo por n log n y viendo que es constante.
            no se me ocurre nada mas interesante para decir.
		
		-Test1: variación entre cociente di/ti (pérdida de ganancia y tiempo de fabricación por pieza). 
	           (todos los di/ti iguales, di/ti aleatorio). 
		Gráfico: tiempo vs n: cant piezas (se comparan los 2 casos en el mismo gráfico). 
		Análisis: 		
			
  Código:
    * Algoritmo: OK
    * Tests: Migue terminandolo

PROBLEMA 3
  Informe:
    * Descripción: OK
    * Hipótesis de resolución:
    * Justificación formal de correctitud:
    * Cota de complejidad temporal:
    * Verificación mediante casos de prueba: OK
    * Medición empírica de performance:
        1> grafico viendo que la complejidad es exponencial
        2> comparar de acuerdo a si las fichas estan distribuidas o todas del mismo color
        3> probar sacando la poda de los huecos, que es facil de hacer   
            debe haber un par de cosas mas interesantes. no me acuerdo ahora
  Código:
    * Algoritmo: Anda.
    * Tests: OK.



INFORME:
  * Introducción
  * Bibliografía

